{"version":3,"sources":["Input.tsx","todo-fsm.ts","useTodo.ts","TodoMvc.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Input","onAppend","ref","useRef","TextField","inputRef","inputProps","onKeyDown","event","key","current","value","label","fullWidth","type","id","todoListMachine","createMachine","initial","context","list","filter","states","init","on","LAUNCH","target","LOAD","actions","assign","_","action","loaded","APPEND_TODO","ctx","concat","content","uuid","isCompleted","TOGGLE_TODO","map","todoItem","UPDATE_TODO","REMOVE_TODO","CLEAR_COMPLETED","SET_FILTER","service","interpret","PERSIST_KEY","identifyByFilter","status","todo","Error","UpdateBox","handleUpdate","useState","isEditting","setIsEditting","newTodo","setNewTodo","onChange","e","onDoubleClick","TodoMvc","useEffect","subscribe","state","changed","setTodoList","window","indexedDB","set","start","launch","send","a","get","persistedValue","launchWithPersistedValue","stop","todoList","dispatch","getTodoListByFilter","getTodoById","find","appendTodo","toggleTodo","clearCompleted","updateTodo","getActiveTodoCount","length","removeTodo","setFilter","filters","useTodo","Divider","List","ListItem","Checkbox","checked","Button","onClick","App","Container","Typography","align","display","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.e2779a32.chunk.js","sourcesContent":["import { FC, KeyboardEvent, useRef } from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\nexport const Input: FC<{ onAppend?: (content: string) => void }> = ({\n  onAppend,\n}) => {\n  const ref = useRef<HTMLInputElement>(null);\n\n  return (\n    <TextField\n      inputRef={ref}\n      inputProps={{\n        onKeyDown: (event: KeyboardEvent<HTMLInputElement>) => {\n          if (\n            event.key === \"Enter\" &&\n            ref.current !== null &&\n            ref.current.value !== \"\"\n          ) {\n            onAppend && onAppend(ref.current.value);\n            ref.current.value = \"\";\n          }\n        },\n      }}\n      label=\"What needs to be done?\"\n      fullWidth\n      type=\"text\"\n      id=\"new-todo-input\"\n    />\n  );\n};\n","import { interpret, assign, createMachine } from \"@xstate/fsm\";\nimport { v4 as uuid } from \"uuid\";\nimport {\n  IStatus,\n  IAppendEvent,\n  ITodoList,\n  ITodoItem,\n  IUpdateEvent,\n  IMachineEvent,\n  IToggleEvent,\n} from \"./types\";\n\nfunction buildTodoItem(content: string): ITodoItem {\n  return {\n    id: uuid(),\n    content,\n    isCompleted: false,\n  };\n}\n\ntype ITodoListContext = {\n  list: ITodoList;\n  filter: IStatus;\n};\n\ntype ITodoState =\n  | {\n      value: \"init\";\n      context: ITodoListContext;\n    }\n  | {\n      value: \"loaded\";\n      context: ITodoListContext;\n    };\n\nexport const todoListMachine = createMachine<\n  ITodoListContext,\n  IMachineEvent,\n  ITodoState\n>({\n  id: \"todo-list\",\n  initial: \"init\",\n  context: {\n    list: [] as ITodoList,\n    filter: \"all\",\n  },\n  states: {\n    init: {\n      on: {\n        LAUNCH: {\n          target: \"loaded\",\n        },\n        LOAD: {\n          target: \"loaded\",\n          actions: [\n            assign({\n              list: (_, action) => action.context.list,\n              filter: (_, action) => action.context.filter,\n            }),\n          ],\n        },\n      },\n    },\n    loaded: {\n      on: {\n        APPEND_TODO: {\n          actions: [\n            assign({\n              list: (ctx, action: IAppendEvent) =>\n                ctx.list.concat(buildTodoItem(action.content)),\n            }),\n          ],\n        },\n        TOGGLE_TODO: {\n          actions: [\n            assign({\n              list: (\n                ctx,\n                action: IToggleEvent // TODO: refactor this as look up table.\n              ) =>\n                ctx.list.map((todoItem) =>\n                  todoItem.id === action.id\n                    ? {\n                        ...todoItem,\n                        isCompleted: !todoItem.isCompleted,\n                      }\n                    : todoItem\n                ),\n            }),\n          ],\n        },\n        UPDATE_TODO: {\n          actions: [\n            assign({\n              list: (ctx, action: IUpdateEvent) =>\n                ctx.list.map((todoItem) =>\n                  todoItem.id === action.id\n                    ? {\n                        ...todoItem,\n                        content: action.content,\n                      }\n                    : todoItem\n                ),\n            }),\n          ],\n        },\n        REMOVE_TODO: {\n          actions: [\n            assign({\n              list: (ctx, action) =>\n                ctx.list.filter(({ id }) => action.id !== id),\n            }),\n          ],\n        },\n        CLEAR_COMPLETED: {\n          actions: [\n            assign({\n              list: (ctx) => ctx.list.filter(({ isCompleted }) => !isCompleted),\n            }),\n          ],\n        },\n        SET_FILTER: {\n          actions: [\n            assign({\n              filter: (_, action) => action.filter,\n            }),\n          ],\n        },\n      },\n    },\n  },\n});\n\nexport const service = interpret(todoListMachine);\n","import { useEffect, useState } from \"react\";\nimport { service } from \"./todo-fsm\";\nimport { get, set } from \"idb-keyval\";\n\nimport type { ITodoItem, ITodoList, IStatus } from \"./types\";\n\nconst PERSIST_KEY = \"_persiste:todo-list-app\";\n\nconst identifyByFilter = (status: IStatus) => (todo: ITodoItem) => {\n  if (status === \"all\") {\n    return true;\n  } else if (status === \"completed\") {\n    return todo.isCompleted;\n  } else if (status === \"active\") {\n    return !todo.isCompleted;\n  } else {\n    throw new Error(\"invalid todo filter\");\n  }\n};\n\nexport function useTodo() {\n  useEffect(() => {\n    service.subscribe((state) => {\n      if (state.changed) {\n        setTodoList(\n          state.context.list.filter(identifyByFilter(state.context.filter))\n        );\n\n        window.indexedDB && set(PERSIST_KEY, state.context);\n      }\n    });\n\n    service.start();\n\n    const launch = () => service.send(\"LAUNCH\");\n\n    async function launchWithPersistedValue() {\n      try {\n        const persistedValue = await get(PERSIST_KEY);\n\n        if (persistedValue) {\n          service.send({\n            type: \"LAUNCH\",\n          });\n          service.send({\n            type: \"LOAD\",\n            context: persistedValue,\n          });\n        } else {\n          launch();\n        }\n      } catch (e) {\n        launch();\n      }\n    }\n\n    if (window.indexedDB) {\n      launchWithPersistedValue();\n    } else {\n      launch();\n    }\n\n    return () => {\n      service.stop();\n    };\n  }, []);\n\n  const [todoList, setTodoList] = useState<ITodoList>([] as ITodoList);\n\n  const dispatch = service.send;\n\n  function appendTodo(content: string) {\n    dispatch({\n      type: \"APPEND_TODO\",\n      content,\n    });\n  }\n\n  function updateTodo(todo: ITodoItem) {\n    dispatch({\n      type: \"UPDATE_TODO\",\n      id: todo.id,\n      content: todo.content,\n    });\n  }\n\n  function toggleTodo(id: string) {\n    dispatch({ type: \"TOGGLE_TODO\", id });\n  }\n\n  function clearCompleted() {\n    dispatch({ type: \"CLEAR_COMPLETED\" });\n  }\n\n  function getTodoListByFilter(status: IStatus = \"all\") {\n    return service.state.context.list.filter(identifyByFilter(status));\n  }\n\n  function getTodoById(id: string) {\n    return service.state.context.list.find((todo) => todo.id === id);\n  }\n\n  function getActiveTodoCount() {\n    return getTodoListByFilter(\"active\").length;\n  }\n\n  function removeTodo(id: string) {\n    dispatch({ type: \"REMOVE_TODO\", id });\n  }\n\n  function setFilter(filter: IStatus) {\n    dispatch({ type: \"SET_FILTER\", filter });\n  }\n\n  return {\n    todoList,\n    getTodoById,\n    appendTodo,\n    toggleTodo,\n    clearCompleted,\n    getTodoListByFilter,\n    updateTodo,\n    getActiveTodoCount,\n    removeTodo,\n    setFilter,\n    filters: [\"all\", \"active\", \"completed\"] as Array<IStatus>,\n  };\n}\n","import { FC, KeyboardEvent, useState } from \"react\";\nimport { Input } from \"./Input\";\nimport { useTodo } from \"./useTodo\";\nimport { Button, Divider, List, ListItem, Checkbox } from \"@material-ui/core\";\nimport { ITodoItem } from \"./types\";\n\nconst UpdateBox: FC<{\n  todo: ITodoItem;\n  handleUpdate: (todo: ITodoItem) => void;\n}> = ({ todo, handleUpdate }) => {\n  const [isEditting, setIsEditting] = useState(() => false);\n  const [newTodo, setNewTodo] = useState(() => todo.content);\n\n  return (\n    <>\n      {isEditting ? (\n        <input\n          value={newTodo}\n          onChange={(e) => setNewTodo(e.target.value)}\n          onKeyDown={(event: KeyboardEvent<HTMLInputElement>) => {\n            if (event.key === \"Escape\") {\n              setIsEditting(false);\n            } else if (event.key === \"Enter\") {\n              handleUpdate({\n                ...todo,\n                content: newTodo,\n              });\n              setIsEditting(false);\n            }\n          }}\n        />\n      ) : (\n        <span\n          onDoubleClick={() => {\n            setIsEditting(true);\n          }}\n        >\n          {todo.content}\n        </span>\n      )}\n    </>\n  );\n};\n\nexport function TodoMvc() {\n  const {\n    todoList,\n    setFilter,\n    filters,\n    toggleTodo,\n    appendTodo,\n    getActiveTodoCount,\n    clearCompleted,\n    removeTodo,\n    updateTodo,\n  } = useTodo();\n\n  return (\n    <>\n      <Input onAppend={(content) => appendTodo(content)} />\n\n      <Divider />\n\n      <List>\n        {todoList.map((todo) => (\n          <ListItem key={todo.id}>\n            <Checkbox\n              checked={todo.isCompleted}\n              onChange={() => toggleTodo(todo.id)}\n            />\n            <UpdateBox todo={todo} handleUpdate={updateTodo} />\n            <Button onClick={() => removeTodo(todo.id)}> x </Button>\n          </ListItem>\n        ))}\n      </List>\n\n      {filters.map((filter) => (\n        <Button key={filter} onClick={() => setFilter(filter)}>\n          {filter}\n        </Button>\n      ))}\n\n      <p> {getActiveTodoCount() + \" active todo(s).\"} </p>\n\n      <Button onClick={() => clearCompleted()}>Clear</Button>\n    </>\n  );\n}\n","import { Typography, Container } from \"@material-ui/core\";\nimport { TodoMvc } from \"./TodoMvc\";\n\nexport default function App() {\n  return (\n    <Container>\n      <Typography align=\"center\" display=\"block\" variant=\"h1\">\n        todo\n      </Typography>\n\n      <TodoMvc />\n\n      <Typography align=\"center\" display=\"block\" variant=\"body2\">\n        &copy; 2021\n      </Typography>\n    </Container>\n  );\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}