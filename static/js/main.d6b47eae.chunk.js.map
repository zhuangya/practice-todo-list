{"version":3,"sources":["Input.tsx","useTodo.ts","TodoMvc.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Input","onAppend","ref","useRef","TextField","inputRef","inputProps","onKeyDown","event","key","current","value","label","fullWidth","type","id","actionsType","todoReducer","state","action","payload","map","todo","isCompleted","filter","content","Error","identifyByFilter","status","UpdateBox","handleUpdate","useState","isEditting","setIsEditting","newTodo","setNewTodo","onChange","e","target","onDoubleClick","TodoMvc","activeFilter","setFilter","initialState","reducer","useReducer","dispatch","appendTodo","uuid","updateTodo","toggleTodo","clearCompleted","getTodoListByFilter","getTodoById","find","getActiveTodoCount","length","removeTodo","todoList","useCallback","filters","useTodo","Divider","List","ListItem","Checkbox","checked","Button","onClick","App","Container","Typography","align","display","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.d6b47eae.chunk.js","sourcesContent":["import { FC, KeyboardEvent, useRef } from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\nexport const Input: FC<{ onAppend?: (content: string) => void }> = ({\n  onAppend,\n}) => {\n  const ref = useRef<HTMLInputElement>(null);\n\n  return (\n    <TextField\n      inputRef={ref}\n      inputProps={{\n        onKeyDown: (event: KeyboardEvent<HTMLInputElement>) => {\n          if (\n            event.key === \"Enter\" &&\n            ref.current !== null &&\n            ref.current.value !== \"\"\n          ) {\n            onAppend && onAppend(ref.current.value);\n            ref.current.value = \"\";\n          }\n        },\n      }}\n      label=\"What needs to be done?\"\n      fullWidth\n      type=\"text\"\n      id=\"new-todo-input\"\n    />\n  );\n};\n","import { useCallback, useReducer } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport type {\n  ITodoItem,\n  ITodoList,\n  IActionLike,\n  IStatus,\n  IActionsType,\n} from \"./types\";\n\nconst actionsType: IActionsType = {\n  append: \"appendTodo\",\n  toggle: \"toggleTodo\",\n  clear: \"clearCompleted\",\n  update: \"updateTodo\",\n  remove: \"removeTodo\",\n};\n\nfunction todoReducer(state: ITodoList, action: IActionLike) {\n  switch (action.type) {\n    case actionsType.append: {\n      return [...state, action.payload];\n    }\n    case actionsType.toggle: {\n      return state.map((todo) =>\n        todo.id === action.payload\n          ? {\n              ...todo,\n              isCompleted: !todo.isCompleted,\n            }\n          : todo\n      );\n    }\n    case actionsType.clear: {\n      return state.filter((todo) => !todo.isCompleted);\n    }\n    case actionsType.update: {\n      return state.map((todo) =>\n        todo.id === action.payload.id\n          ? {\n              ...todo,\n              content: action.payload.content,\n              isCompleted: action.payload.isCompleted,\n            }\n          : todo\n      );\n    }\n    case actionsType.remove: {\n      return state.filter((todo) => todo.id !== action.payload);\n    }\n    default:\n      throw new Error(\"invalid todo action type\");\n  }\n}\n\nconst identifyByFilter = (status: IStatus) => (todo: ITodoItem) => {\n  if (status === \"all\") {\n    return true;\n  } else if (status === \"completed\") {\n    return todo.isCompleted;\n  } else if (status === \"active\") {\n    return !todo.isCompleted;\n  } else {\n    throw new Error(\"invalid todo filter\");\n  }\n};\n\nexport function useTodo(initialState = [] as ITodoList, reducer = todoReducer) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  function appendTodo(content: string) {\n    dispatch({\n      type: actionsType.append,\n      payload: {\n        id: uuid(),\n        content,\n        isCompleted: false,\n      },\n    });\n  }\n\n  function updateTodo(todo: ITodoItem) {\n    dispatch({\n      type: actionsType.update,\n      payload: todo,\n    });\n  }\n\n  function toggleTodo(id: string) {\n    dispatch({ type: actionsType.toggle, payload: id });\n  }\n\n  function clearCompleted() {\n    dispatch({ type: actionsType.clear });\n  }\n\n  function getTodoListByFilter(status: IStatus = \"all\") {\n    return state.filter(identifyByFilter(status));\n  }\n\n  function getTodoById(id: string) {\n    return state.find((todo) => todo.id === id);\n  }\n\n  function getActiveTodoCount() {\n    return getTodoListByFilter(\"active\").length;\n  }\n\n  function removeTodo(id: string) {\n    dispatch({ type: actionsType.remove, payload: id });\n  }\n\n  return {\n    todoList: state,\n    getTodoById,\n    appendTodo,\n    toggleTodo,\n    clearCompleted,\n    getTodoListByFilter,\n    updateTodo: useCallback((todo) => updateTodo(todo), []),\n    getActiveTodoCount,\n    removeTodo,\n    filters: [\"all\", \"active\", \"completed\"] as Array<IStatus>,\n  };\n}\n","import { FC, KeyboardEvent, useState } from \"react\";\nimport { Input } from \"./Input\";\nimport { useTodo } from \"./useTodo\";\nimport { Button, Divider, List, ListItem, Checkbox } from \"@material-ui/core\";\nimport { ITodoItem, IStatus } from \"./types\";\n\nconst UpdateBox: FC<{\n  todo: ITodoItem;\n  handleUpdate: (todo: ITodoItem) => void;\n}> = ({ todo, handleUpdate }) => {\n  const [isEditting, setIsEditting] = useState(() => false);\n  const [newTodo, setNewTodo] = useState(() => todo.content);\n\n  return (\n    <>\n      {isEditting ? (\n        <input\n          value={newTodo}\n          onChange={(e) => setNewTodo(e.target.value)}\n          onKeyDown={(event: KeyboardEvent<HTMLInputElement>) => {\n            if (event.key === \"Escape\") {\n              setIsEditting(false);\n            } else if (event.key === \"Enter\") {\n              handleUpdate({\n                ...todo,\n                content: newTodo,\n              });\n              setIsEditting(false);\n            }\n          }}\n        />\n      ) : (\n        <span\n          onDoubleClick={() => {\n            setIsEditting(true);\n          }}\n        >\n          {todo.content}\n        </span>\n      )}\n    </>\n  );\n};\n\nexport function TodoMvc() {\n  const [activeFilter, setFilter] = useState<IStatus>(() => \"all\");\n  const {\n    filters,\n    toggleTodo,\n    appendTodo,\n    getTodoListByFilter,\n    getActiveTodoCount,\n    clearCompleted,\n    removeTodo,\n    updateTodo,\n  } = useTodo();\n\n  return (\n    <>\n      <Input onAppend={(content) => appendTodo(content)} />\n\n      <Divider />\n\n      <List>\n        {getTodoListByFilter(activeFilter).map((todo) => (\n          <ListItem key={todo.id}>\n            <Checkbox\n              checked={todo.isCompleted}\n              onChange={() => toggleTodo(todo.id)}\n            />\n            <UpdateBox todo={todo} handleUpdate={updateTodo} />\n            <Button onClick={() => removeTodo(todo.id)}> x </Button>\n          </ListItem>\n        ))}\n      </List>\n\n      {filters.map((filter) => (\n        <Button key={filter} onClick={() => setFilter(filter)}>\n          {filter}\n        </Button>\n      ))}\n\n      <p> {getActiveTodoCount() + \" active todo(s).\"} </p>\n\n      <Button onClick={() => clearCompleted()}>Clear</Button>\n    </>\n  );\n}\n","import { Typography, Container } from \"@material-ui/core\";\nimport { TodoMvc } from \"./TodoMvc\";\n\nexport default function App() {\n  return (\n    <Container>\n      <Typography align=\"center\" display=\"block\" variant=\"h1\">\n        todo\n      </Typography>\n\n      <TodoMvc />\n\n      <Typography align=\"center\" display=\"block\" variant=\"body2\">\n        &copy; 2021\n      </Typography>\n    </Container>\n  );\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}